import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the flatlandSpaceStations function below.
   private static int flatlandSpaceStations(int n, int[] arr) {
        Arrays.sort(arr);
        int maxDis=0;
        if(n==arr.length){
            return 0;
        }
        else{
            int sPoint=0;
            int nPoint=0;
            if(arr.length>1){nPoint=1;}
            for(int i=0;i<n;i++){
                if(i!=arr[sPoint] && i==arr[nPoint]){
                    sPoint=nPoint;
                    if(arr.length-1>nPoint){
                        nPoint++;
                    }
                    
                }
                else{

                    int minDis=Math.min(Math.abs(i-arr[sPoint]),Math.abs(i-arr[nPoint]));
                    if(minDis>maxDis){maxDis=minDis;}
                }
                
            }
        }
        return maxDis;
    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[] c = new int[m];

        String[] cItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < m; i++) {
            int cItem = Integer.parseInt(cItems[i]);
            c[i] = cItem;
        }

        int result = flatlandSpaceStations(n, c);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
