import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    private static int queensAttack(int n, int k, int qX, int qY, int[][] obstacles) {
     
        int top=n-qX;
        int bottom=qX-1;
        int left=qY-1;
        int right=n-qY;
        int bLeft=Math.min(qX-1,qY-1);
        int bRight=Math.min(qX-1,n-qY);
        int tLeft=Math.min(n-qX,qY-1);
        int tRight=Math.min(n-qX,n-qY);
        for (int[] obstacle : obstacles) 
        {
            int obsX=obstacle[0];
            int obsY=obstacle[1];
            //Left and Right possible distances
            if(qX==obsX){
                if(qY>obsY){
                    
                    if((qY-obsY-1)<left){
                        left=qY-obsY-1;
                    }
                }
                else{
                    if((obsY-qY-1)<right){
                    right=obsY-qY-1;
                    }
                }
            }
            //Bottom and Top possible distances
            if(qY==obsY){
                if(qX>obsX){
                    if((qX-obsX-1)<bottom){
                        bottom=qX-obsX-1;
                    }
                }
                else{
                    if((obsX-qX-1)<top){
                    top=obsX-qX-1;
                    }
                }
            }
            //Bottom-Right possible distance 
            if((qX-obsX)==-(qY-obsY) && qX>obsX && qY<obsY){ 
                if(bRight> ( (qX-obsX)-1) ){
                    bRight=(qX-obsX)-1;
                }
            }
            //Bottom-Left possible distance
            if((qX-obsX)==(qY-obsY) && qX>obsX && qY>obsY){
                if(bLeft> ( (qX-obsX)-1) ){
                    bLeft=(qX-obsX)-1;
                } 
            }
            //Top-Right
            if((obsX-qX)==(obsY-qY)&& qX<obsX && qY<obsY){      
                if( tRight> ( (obsX-qX)-1) ){
                    tRight=(obsX-qX)-1;
                }
            }
            //Top-Left
            if((qY-obsY)==-(qX-obsX)&& qX<obsX && qY>obsY){  
                if(tLeft> ( (qY-obsY)-1) ){
                    tLeft=(qY-obsY)-1;
                }
            }
        }
        
    return top+bottom+left+right+bLeft+bRight+tLeft+tRight;
    }
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nk = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nk[0]);

        int k = Integer.parseInt(nk[1]);

        String[] r_qC_q = scanner.nextLine().split(" ");

        int r_q = Integer.parseInt(r_qC_q[0]);

        int c_q = Integer.parseInt(r_qC_q[1]);

        int[][] obstacles = new int[k][2];

        for (int i = 0; i < k; i++) {
            String[] obstaclesRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 2; j++) {
                int obstaclesItem = Integer.parseInt(obstaclesRowItems[j]);
                obstacles[i][j] = obstaclesItem;
            }
        }

        int result = queensAttack(n, k, r_q, c_q, obstacles);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
