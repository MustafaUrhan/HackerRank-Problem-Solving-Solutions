import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the minimumNumber function below.
    static int minimumNumber(int n, String password) {
        int retNum = 0;
        String digReg = "(?=.*\\d)";
        if (RegMat(digReg, password)) {
            retNum++;
        }
        String LCReg = "(?=.*[a-z])";
        if (RegMat(LCReg, password)) {
            retNum++;
        }
        String UCReg = "(?=.*[A-Z])";
        if (RegMat(UCReg, password)) {
            retNum++;
        }
        String ChReg = "(?=.*[!@#$%^&*()--+])";
        if (RegMat(ChReg, password)) {
            retNum++;
        }
        return password.length() + (4 - retNum) < 6 ? 
        (6 - password.length() - (4 - retNum)) + (4 - retNum): (4 - retNum);

    }
    
    private static boolean RegMat(String reg, String pass) {
        Pattern patt = Pattern.compile(reg);
        Matcher mat = patt.matcher(pass);
        return mat.find();
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String password = scanner.nextLine();

        int answer = minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
