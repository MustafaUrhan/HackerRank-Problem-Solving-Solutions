import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the absolutePermutation function below.
    static int[] absolutePermutation(int n, int k) {
          /*
        1) n odd and k is not zero there is no permutation
        */
        if (n % 2 != 0 && k != 0) {
            int[] retArr = {-1};
            return retArr;
        }
        /*
        2) if k is zore all permutations are valid but lexicographically one is 1 to n
        */
        if (k == 0) {
            int[] retArr = new int[n];
            for (int i = 0; i < n; i++) {
                retArr[i] = i + 1;
            }
            return retArr;
        } 
        /*
        3) n is even and (n % (k) == 0) there are n/k subsequence k numbers 
        */
        else if (n % 2 == 0) 
        {
            
            if (n % (k) == 0) 
            {
                int[] retArr = new int[n];
                int per=n/k;
                int curr=k;
                int temp=0;
                for(int i=0;i<per;i++)
                {
                    for(int j=0;j<k;j++)
                    {
                        curr++;
                        retArr[temp]=curr;
                        temp++;
                    }
                    if(i%2!=0)
                    {
                        curr=curr+(2*k);
                    }
                    else
                    {
                        curr=curr-(2*k);
                    }
                }
                return retArr;
            }
            /*
            4) if n%k!=0 there is no permutation
            */
            else 
            {
                int[] retArr = {-1};
                return retArr;
            }
        }
        int[] retArr = {-1};
        return retArr;

    }

    static Scanner in = new Scanner(System.in);

    public static void main(String[] args) {
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            int n = in.nextInt();
            int k = in.nextInt();

            if (k == 0) {
                for (int i = 1; i <= n; i++) {
                    System.out.print(i + " ");
                }
                System.out.println();
            } else if (n % 2 == 0 && n % (2 * k) == 0) {
                int blocks = n / k;
                int currentNumber = k;
                for (int i = 0; i < blocks; i++) {
                    for (int j = 0; j < k; j++) {
                        currentNumber++;
                        System.out.print(currentNumber + " ");

                    }
                    if (i % 2 != 0) {
                        currentNumber = currentNumber + (2 * k);
                    } else {
                        currentNumber = currentNumber - (2 * k);
                    }
                }
                System.out.println();
            } else {
                System.out.println(-1);
            }

        }
    }            
}
