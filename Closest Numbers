import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the closestNumbers function below.
    static Object[] closestNumbers(int[] arr) {
        Arrays.sort(arr);
        int minDis = Integer.MAX_VALUE;
        HashMap<Integer, ArrayList<Integer>> hashMap = new HashMap<>();
        for (int i = 0; i < arr.length - 1; i++) {
            int lDis = arr[i + 1] - arr[i];
            minDis = minDis > lDis ? lDis : minDis;
            if (!hashMap.containsKey(lDis)) {
                ArrayList<Integer> Alist = new ArrayList<>();
                Alist.add(arr[i]);
                Alist.add(arr[i + 1]);
                hashMap.put(lDis, Alist);
            } else {
                ArrayList<Integer> t_Alist = hashMap.get(lDis);
                t_Alist.add(arr[i]);
                t_Alist.add(arr[i + 1]);
                hashMap.put(lDis, t_Alist);
            }
        }

        return hashMap.get(minDis).toArray();

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        Object[] result = closestNumbers(arr);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
